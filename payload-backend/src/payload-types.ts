/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    pages: Page;
    media: Media;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {};
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  firstName: string;
  lastName: string;
  roles?: ('admin' | 'editor')[] | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  name: string;
  slug: string;
  layout?:
    | (
        | {
            headingFirstLine: string;
            headingSecondLine?: string | null;
            headingSize: '90px' | '65px';
            svg: string | Media;
            background: string | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'header';
          }
        | {
            lightHeading: string;
            boldHeading: string;
            paragraph1: string;
            paragraph2?: string | null;
            paragraphAlignment: 'left' | 'justified' | 'right';
            theme: 'dark' | 'light';
            id?: string | null;
            blockName?: string | null;
            blockType: 'contentBlock';
          }
        | {
            image: string | Media;
            imageAlignment: 'left' | 'right' | 'fullWidth';
            id?: string | null;
            blockName?: string | null;
            blockType: 'imageBlock';
          }
        | {
            lightHeading?: string | null;
            boldHeading: string;
            paragraph1: string;
            paragraph2?: string | null;
            buttonLabel?: string | null;
            buttonLink?: string | null;
            icon?: ('' | 'arrow-right') | null;
            image: string | Media;
            direction: 'default' | 'reverse';
            theme: 'dark' | 'light';
            id?: string | null;
            blockName?: string | null;
            blockType: 'twoColumnsBlock';
          }
        | {
            buttonLabel: string;
            buttonLink: string;
            icon: 'none' | 'arrow-head-right';
            alignment: 'left' | 'right';
            theme: 'dark' | 'light';
            id?: string | null;
            blockName?: string | null;
            blockType: 'button';
          }
        | {
            body?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'simpleRichText';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}